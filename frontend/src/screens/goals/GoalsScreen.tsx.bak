import React, { useState, useEffect } from 'react';
import { View, StyleSheet, ScrollView, TouchableOpacity, TextInput as RNTextInput, Alert } from 'react-native';
import {
  Text,
  Card,
  Title,
  Button,
  Divider,
  Switch,
  useTheme,
  ActivityIndicator
} from 'react-native-paper';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { goalService } from '../../services/goalService';
import { useIsFocused } from '@react-navigation/native';

// Goal types
type GoalType = 'calories' | 'macros';

// Macro goals interface
interface MacroGoals {
  protein: number;
  carbs: number;
  fat: number;
}

const GoalsScreen: React.FC = () => {
  const theme = useTheme();
  const isFocused = useIsFocused();

  // State for goal type (calories or macros)
  const [goalType, setGoalType] = useState<GoalType>('calories');

  // State for calorie goal
  const [calorieGoal, setCalorieGoal] = useState('2000');

  // State for macro goals
  const [macroGoals, setMacroGoals] = useState<MacroGoals>({
    protein: 30, // percentage
    carbs: 40,   // percentage
    fat: 30      // percentage
  });

  // State for loading
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [currentGoalId, setCurrentGoalId] = useState<number | null>(null);

  // Load saved goals on component mount or when screen is focused
  useEffect(() => {
    loadGoals();
  }, [isFocused]);

  const loadGoals = async () => {
    try {
      setLoading(true);
      // Load current goal from API
      const currentGoal = await goalService.getCurrentGoal();

      if (currentGoal) {
        // Set goal ID for updates
        setCurrentGoalId(currentGoal.id || null);

        // Determine goal type based on the goal data
        if (currentGoal.daily_calorie_target > 0 &&
            (!currentGoal.protein_target_grams || currentGoal.protein_target_grams === 0) &&
            (!currentGoal.carbs_target_grams || currentGoal.carbs_target_grams === 0) &&
            (!currentGoal.fat_target_grams || currentGoal.fat_target_grams === 0)) {
          // This is a calorie-only goal
          setGoalType('calories');
          setCalorieGoal(currentGoal.daily_calorie_target.toString());
        } else if ((!currentGoal.daily_calorie_target || currentGoal.daily_calorie_target === 0) &&
                  (currentGoal.protein_target_grams > 0 ||
                   currentGoal.carbs_target_grams > 0 ||
                   currentGoal.fat_target_grams > 0)) {
          // This is a macro-only goal
          setGoalType('macros');
          setMacroGoals({
            protein: currentGoal.protein_target_grams || 0,
            carbs: currentGoal.carbs_target_grams || 0,
            fat: currentGoal.fat_target_grams || 0
          });

          // Set a default calorie goal for calculations
          setCalorieGoal('2000');
        }
      }
    } catch (error) {
      console.error('Error loading goals:', error);
      Alert.alert('Error', 'Failed to load goals. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Save goals to backend
  // Save goals to backend
  // Save goals to backend
  // Save goals to backend
  const saveGoals = async () => {
    try {
      setSaving(true);

      // Calculate macros in grams if using macros goal type
      const macrosInGrams = calculateCaloriesFromMacros();

      // Prepare goal data based on goal type
      let goalData;

      if (goalType === 'calories') {
        // For calorie-only goals, don't set macro values
        goalData = {
          daily_calorie_target: parseInt(calorieGoal),
          protein_target_grams: 0,
          carbs_target_grams: 0,
          fat_target_grams: 0,
          start_date: new Date().toISOString().split('T')[0], // Today's date
          end_date: null, // No end date
        };
      } else {
        // For macro goals, use the calculated values
        goalData = {
          daily_calorie_target: parseInt(calorieGoal),
          protein_target_grams: macrosInGrams.protein,
          carbs_target_grams: macrosInGrams.carbs,
          fat_target_grams: macrosInGrams.fat,
          start_date: new Date().toISOString().split('T')[0], // Today's date
          end_date: null, // No end date
        };
      }

      console.log('Saving goal data:', goalData);

      // If we have an existing goal, update it
      if (currentGoalId) {
        await goalService.updateGoal(currentGoalId, goalData);
      } else {
        // Otherwise create a new goal
        const newGoal = await goalService.createGoal(goalData);
        if (newGoal && newGoal.id) {
          setCurrentGoalId(newGoal.id);
        }
      }

      // Show success message
      Alert.alert('Success', 'Goals saved successfully!');
    } catch (error) {
      console.error('Error saving goals:', error);
      Alert.alert('Error', 'Failed to save goals. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  // Update macro goal
  const updateMacroGoal = (type: keyof MacroGoals, value: string) => {
    const numValue = parseInt(value) || 0;
    setMacroGoals(prev => ({
      ...prev,
      [type]: numValue
    }));
  };

  // Calculate calories from macros
  const calculateCaloriesFromMacros = () => {
    const proteinCalories = (parseInt(calorieGoal) * macroGoals.protein / 100);
    const carbCalories = (parseInt(calorieGoal) * macroGoals.carbs / 100);
    const fatCalories = (parseInt(calorieGoal) * macroGoals.fat / 100);

    return {
      protein: Math.round(proteinCalories / 4), // 4 calories per gram of protein
      carbs: Math.round(carbCalories / 4),      // 4 calories per gram of carbs
      fat: Math.round(fatCalories / 9)          // 9 calories per gram of fat
    };
  };

  // Calculate total percentage
  const totalPercentage = macroGoals.protein + macroGoals.carbs + macroGoals.fat;

  // Calculate macros in grams
  const macrosInGrams = calculateCaloriesFromMacros();

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={theme.colors.primary} />
        <Text style={{ marginTop: 16 }}>Loading goals...</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <View style={styles.content}>
        <Card style={styles.card}>
          <Card.Content>
            <Title style={{ marginBottom: 16 }}>Nutrition Goals</Title>

            <Text style={styles.sectionTitle}>Goal Type</Text>
            <View style={styles.goalTypeContainer}>
              <TouchableOpacity
                style={[
                  styles.goalTypeButton,
                  goalType === 'calories' && { backgroundColor: theme.colors.primary }
                ]}
                onPress={() => setGoalType('calories')}
              >
                <MaterialCommunityIcons
                  name="fire"
                  size={20}
                  color={goalType === 'calories' ? 'white' : theme.colors.primary}
                />
                <Text style={[
                  styles.goalTypeText,
                  goalType === 'calories' && { color: 'white' }
                ]}>
                  Calories
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.goalTypeButton,
                  goalType === 'macros' && { backgroundColor: theme.colors.primary }
                ]}
                onPress={() => setGoalType('macros')}
              >
                <MaterialCommunityIcons
                  name="chart-pie"
                  size={20}
                  color={goalType === 'macros' ? 'white' : theme.colors.primary}
                />
                <Text style={[
                  styles.goalTypeText,
                  goalType === 'macros' && { color: 'white' }
                ]}>
                  Macros
                </Text>
              </TouchableOpacity>
            </View>

            <Divider style={{ marginVertical: 16 }} />

            <Text style={styles.sectionTitle}>Daily Calorie Target</Text>
            <View style={styles.inputContainer}>
              <RNTextInput
                style={styles.input}
                value={calorieGoal}
                onChangeText={setCalorieGoal}
                keyboardType="numeric"
                placeholder="Enter calories"
              />
              <Text style={styles.inputSuffix}>kcal</Text>
            </View>

            {goalType === 'macros' && (
              <>
                <Divider style={{ marginVertical: 16 }} />

                <Text style={styles.sectionTitle}>Macronutrient Distribution</Text>
                <Text style={[styles.totalPercentage,
                  totalPercentage !== 100 ? { color: 'red' } : { color: 'green' }]}>
                  Total: {totalPercentage}% {totalPercentage !== 100 ? '(Should equal 100%)' : 'âœ“'}
                </Text>

                <View style={styles.macroInputContainer}>
                  <View style={styles.macroInput}>
                    <View style={styles.inputContainer}>
                      <RNTextInput
                        style={styles.input}
                        value={macroGoals.protein.toString()}
                        onChangeText={(value) => updateMacroGoal('protein', value)}
                        keyboardType="numeric"
                        placeholder="Protein"
                      />
                      <Text style={styles.inputSuffix}>%</Text>
                    </View>
                    <Text style={styles.macroGrams}>{macrosInGrams.protein}g</Text>
                  </View>

                  <View style={styles.macroInput}>
                    <View style={styles.inputContainer}>
                      <RNTextInput
                        style={styles.input}
                        value={macroGoals.carbs.toString()}
                        onChangeText={(value) => updateMacroGoal('carbs', value)}
                        keyboardType="numeric"
                        placeholder="Carbs"
                      />
                      <Text style={styles.inputSuffix}>%</Text>
                    </View>
                    <Text style={styles.macroGrams}>{macrosInGrams.carbs}g</Text>
                  </View>

                  <View style={styles.macroInput}>
                    <View style={styles.inputContainer}>
                      <RNTextInput
                        style={styles.input}
                        value={macroGoals.fat.toString()}
                        onChangeText={(value) => updateMacroGoal('fat', value)}
                        keyboardType="numeric"
                        placeholder="Fat"
                      />
                      <Text style={styles.inputSuffix}>%</Text>
                    </View>
                    <Text style={styles.macroGrams}>{macrosInGrams.fat}g</Text>
                  </View>
                </View>

                <Card style={styles.infoCard}>
                  <Card.Content>
                    <Text style={styles.infoText}>
                      <MaterialCommunityIcons name="information-outline" size={16} />
                      {' '}Protein and carbs contain 4 calories per gram, while fat contains 9 calories per gram.
                    </Text>
                  </Card.Content>
                </Card>
              </>
            )}

            <Button
              mode="contained"
              onPress={saveGoals}
              style={{ marginTop: 24 }}
              disabled={goalType === 'macros' && totalPercentage !== 100 || saving}
              loading={saving}
            >
              {saving ? 'Saving...' : 'Save Goals'}
            </Button>
          </Card.Content>
        </Card>

        <Card style={styles.card}>
          <Card.Content>
            <Title>Preset Diets</Title>
            <Text style={{ marginBottom: 16 }}>Quick start with popular diet macros</Text>

            <TouchableOpacity
              style={styles.presetItem}
              onPress={() => {
                setGoalType('macros');
                setMacroGoals({ protein: 20, carbs: 50, fat: 30 });
              }}
            >
              <View style={styles.presetContent}>
                <Text style={styles.presetTitle}>Balanced</Text>
                <Text>20% Protein, 50% Carbs, 30% Fat</Text>
              </View>
              <MaterialCommunityIcons name="chevron-right" size={24} color={theme.colors.primary} />
            </TouchableOpacity>

            <Divider style={{ marginVertical: 8 }} />

            <TouchableOpacity
              style={styles.presetItem}
              onPress={() => {
                setGoalType('macros');
                setMacroGoals({ protein: 30, carbs: 40, fat: 30 });
              }}
            >
              <View style={styles.presetContent}>
                <Text style={styles.presetTitle}>High Protein</Text>
                <Text>30% Protein, 40% Carbs, 30% Fat</Text>
              </View>
              <MaterialCommunityIcons name="chevron-right" size={24} color={theme.colors.primary} />
            </TouchableOpacity>

            <Divider style={{ marginVertical: 8 }} />

            <TouchableOpacity
              style={styles.presetItem}
              onPress={() => {
                setGoalType('macros');
                setMacroGoals({ protein: 20, carbs: 5, fat: 75 });
              }}
            >
              <View style={styles.presetContent}>
                <Text style={styles.presetTitle}>Keto</Text>
                <Text>20% Protein, 5% Carbs, 75% Fat</Text>
              </View>
              <MaterialCommunityIcons name="chevron-right" size={24} color={theme.colors.primary} />
            </TouchableOpacity>

            <Divider style={{ marginVertical: 8 }} />

            <TouchableOpacity
              style={styles.presetItem}
              onPress={() => {
                setGoalType('macros');
                setMacroGoals({ protein: 25, carbs: 60, fat: 15 });
              }}
            >
              <View style={styles.presetContent}>
                <Text style={styles.presetTitle}>Low Fat</Text>
                <Text>25% Protein, 60% Carbs, 15% Fat</Text>
              </View>
              <MaterialCommunityIcons name="chevron-right" size={24} color={theme.colors.primary} />
            </TouchableOpacity>
          </Card.Content>
        </Card>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  content: {
    padding: 16,
  },
  card: {
    marginBottom: 16,
    borderRadius: 8,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  goalTypeContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  goalTypeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#ddd',
    flex: 1,
    marginHorizontal: 4,
    gap: 8,
  },
  goalTypeText: {
    fontWeight: 'bold',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    marginBottom: 16,
    paddingHorizontal: 8,
  },
  input: {
    flex: 1,
    height: 40,
    padding: 8,
  },
  inputSuffix: {
    marginLeft: 8,
    fontWeight: 'bold',
  },
  totalPercentage: {
    marginTop: 8,
    marginBottom: 16,
    fontWeight: 'bold',
  },
  macroInputContainer: {
    flexDirection: 'column',
    gap: 12,
  },
  macroInput: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  macroGrams: {
    marginLeft: 12,
    fontSize: 16,
    fontWeight: 'bold',
    width: 50,
  },
  infoCard: {
    backgroundColor: '#f0f8ff',
    marginTop: 16,
  },
  infoText: {
    fontSize: 14,
  },
  presetItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 12,
  },
  presetContent: {
    flex: 1,
  },
  presetTitle: {
    fontWeight: 'bold',
    fontSize: 16,
    marginBottom: 4,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    height: '100%',
    width: '100%',
    position: 'absolute',
    top: 0,
    left: 0,
    zIndex: 999,
  },
});

export default GoalsScreen;
